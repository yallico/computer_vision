# -*- coding: utf-8 -*-
"""Tutorial_Six.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12-eJDSjFRPRGwZ0ihwhWEbZWE6SmJyIe

# Import libraries, packages and modules
"""

from skimage.feature import local_binary_pattern   # import the local_binary_pattern() function from skimage library 
from skimage import data              # for more information about the skimage please visit https://scikit-image.org/
from skimage.color import label2rgb        # function importing. see comments below
import matplotlib.pyplot as plt         # ...
import numpy as np               # ...

"""# Set parameters for LBP
For more information, please watch the lecture recordings or find the definitions in this paper https://www.researchgate.net/publication/331541161_Circular_Derivative_Local_Binary_Pattern_Feature_Description_for_Facial_Expression_Recognition
"""

# settings for LBP (For more information, please watch the lecture recordings or find the definitions in this paper https://www.researchgate.net/publication/331541161_Circular_Derivative_Local_Binary_Pattern_Feature_Description_for_Facial_Expression_Recognition)
radius = 1               # pre-define the radius of LBP feature 
n_points = 8 * radius         # define the number of points in a local patch

"""# Define functions for later use
The following codes defines a function which can mark the area with certain features
"""

def overlay_labels(image, lbp, labels):  
    mask = np.logical_or.reduce([lbp == each for each in labels]) # this line is uesd to generate a mask.
    # print([lbp == each for each in labels]) # if you cannot understand the above line, you can uncomment this line to see the output of this formula. You will see an array of Boolean matrices, whcih indicate the values in lbp equal to a entry in labels
    return label2rgb(mask, image=image, bg_label=0, alpha=0.5) # label2rgb() will apply the mask to the image

"""The function below is defined to color all selected bars red, it intake the bar chart object and the indexes of bars which you want to color """

def highlight_bars(bars, indexes):
    for i in indexes:     
        bars[i].set_facecolor('r')   # fill the bar with red

"""This following function is defined to draw a histogram of a LBP feature map"""

def hist(ax, lbp): 
    n_bins = int(lbp.max() + 1) # to plot a histogram of all the value in a lbp map, I add 1 to set the total number of bars in the histogram
    return ax.hist(lbp.ravel(), density=True, bins=n_bins, range=(0, n_bins), 
                   facecolor='0.5')     # draw the histogram. .ravel() will convert a matrix to a vector

"""# Read an image and calculate the LPB feature
Start to study the code for this week from this chapter
"""

image = data.brick()        # read the brick image from the skimage library
plt.imshow(image, cmap='gray')   # print this image on screen
#plt.show()
lbp = local_binary_pattern(image, n_points, radius, 'uniform')    # this is the core function of this tutorial, which returens a lbp map of an image

"""# Show visualised LPB feature"""

fig, (ax_img, ax_hist) = plt.subplots(nrows=2, ncols=3, figsize=(9, 6))   # create a figure which contains 6 (2*3) subfigures. figsize() is used to adjust the size of all figures
plt.gray() # Set the colormap to 'gray'

titles = ('edge', 'flat', 'corner')   # create an string array made up of the title of figures
w = width = radius - 1          # set the value of variable 'w' and 'width' to 'radius - 1' 
edge_labels = range(n_points // 2 - w, n_points // 2 + w + 1)  # this will create a range for the label of 'edge' in lbp 
flat_labels = list(range(0, w + 1)) + list(range(n_points - w, n_points + 2)) # this will create a range for the label of 'flat' in lbp 
i_14 = n_points // 4            # 1/4th of the histogram
i_34 = 3 * (n_points // 4)      # 3/4th of the histogram
corner_labels = (list(range(i_14 - w, i_14 + w + 1)) +
                 list(range(i_34 - w, i_34 + w + 1)))   # this will create a range for the label of 'corner' in lbp 

label_sets = (edge_labels, flat_labels, corner_labels)  # put all labels for 'edge', 'flat' and 'corner' into an array


# the following 3 for loops are used to draw each figure one by one
for ax, labels in zip(ax_img, label_sets):  # zip() is to create a table which the handle of each image and its title
    ax.imshow(overlay_labels(image, lbp, labels)) # invoke the function overlay_labels() defined above and display the image with red marks


for ax, labels, name in zip(ax_hist, label_sets, titles): # zip() is to create a table which the handle of each histogram, its title and the label set defined above
    counts, _, bars = hist(ax, lbp) # plot the histogram but only keep the output of 'the number of bars' and the bars
    highlight_bars(bars, labels)    # invoke function defined above to color the bar which belongs to 'edge', 'flat' or 'corner' 
    ax.set_ylim(top=np.max(counts[:-1])) # set the top limit of y, which is set as the max value in 'counts' to avoid overflow
    ax.set_xlim(right=n_points + 2) # set the right limit of x as the number of neighborhood pixel in the lbp feature
    ax.set_title(name)  # name each sub-figure

ax_hist[0].set_ylabel('Percentage')  # this is outside of a loop, so add the text 'Percentage' to the left of 3 figures
for ax in ax_img:   
    ax.axis('off')  # hide all the axis for 3 color grayscale images

plt.show()  # show the figure

print("done")