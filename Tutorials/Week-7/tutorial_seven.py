# -*- coding: utf-8 -*-
"""Tutorial_seven.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Iul4ad6fuVy0yrSSTr0T_7KO3KxsunL

## UFMFRR-15-M - Machine Vision
# Tutorial 7 - Train a Convolutional Neural Network (CNN) with CIFAR Images

This tutorial demonstrates training a simple [Convolutional Neural Network](https://developers.google.com/machine-learning/glossary/#convolutional_neural_network) (CNN) to classify [CIFAR images](https://www.cs.toronto.edu/~kriz/cifar.html). Because this tutorial uses the [Keras Sequential API](https://www.tensorflow.org/guide/keras/overview), creating and training our model will take just a few lines of code.

### Import TensorFlow
"""

import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

"""### Download and prepare the CIFAR10 dataset


The CIFAR10 dataset contains 60,000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images. The classes are mutually exclusive and there is no overlap between them.
"""

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

"""### Verify the data

To verify that the dataset looks correct, let's plot the first 25 images from the training set and display the class name below each image.

"""

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']
              # https://www.cs.toronto.edu/~kriz/cifar.html

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    # The CIFAR labels happen to be arrays,
    # which is why you need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

"""### Create the convolutional base

The 6 lines of code below define the convolutional base using a common pattern: a stack of [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D) and [MaxPooling2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D) layers.

As input, a CNN takes tensors of shape (image_height, image_width, color_channels), ignoring the batch size. If you are new to these dimensions, color_channels refers to (R,G,B). In this example, you will configure our CNN to process inputs of shape (32, 32, 3), which is the format of CIFAR images. You can do this by passing the argument `input_shape` to our first layer.
"""

model = models.Sequential()  # Sequential groups a linear stack of layers into a tf.keras.Model.
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))   # After each convolutional operation, we can apply Rectified Linear Unit (ReLU)
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

"""Let's display the architecture of our model so far."""

model.summary()

"""Above, you can see that the output of every Conv2D and MaxPooling2D layer is a 3D tensor of shape (height, width, channels). The width and height dimensions tend to shrink as you go deeper in the network. The number of output channels for each Conv2D layer is controlled by the first argument (e.g., 32 or 64). Typically,  as the width and height shrink, you can afford (computationally) to add more output channels in each Conv2D layer.

### Add Dense layers on top
To complete our model, you will feed the last output tensor from the convolutional base (of shape (4, 4, 64)) into one or more Dense layers to perform classification. Dense layers take vectors as input (which are 1D), while the current output is a 3D tensor. First, you will flatten (or unroll) the 3D output to 1D,  then add one or more Dense layers on top. CIFAR has 10 output classes, so you use a final Dense layer with 10 outputs and a softmax activation.
"""

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

"""Here's the complete architecture of our model."""

model.summary()

"""As you can see, our (4, 4, 64) outputs were flattened into vectors of shape (1024) before going through two Dense layers.

### Compile and train the model
"""

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

"""### Evaluate the model"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print(test_acc)

"""Our simple CNN has achieved a test accuracy of over 70%. Not bad for a few lines of code! For another CNN style, see an example using the Keras subclassing API and a `tf.GradientTape` [here](https://www.tensorflow.org/tutorials/quickstart/advanced).

## What you should do next
### 1. Use the trained CNN to predict the class of an unseen image

To *formativly assess* your learning performace in this week, you are required to use the trained CNN to predict the category of an image by using [```model.predict()```](https://www.tensorflow.org/tutorials/images/classification) function (Click on the function name for more information) in TensorFlow, which is the inference procedure. You are now required to classify an image from the Internet using the CNN, such as Figure 1 below. Please remember to convert the output of the CNN to a class name in your result.

<div>
    <img src="https://hips.hearstapps.com/hmg-prod/images/chow-chow-portrait-royalty-free-image-1652926953.jpg?crop=0.44455xw:1xh;center,top&resize=980:* " width = 100 />
</div>
Figure 1. A dog image

### 2. Adjust the model structure and its training parameters to optimise the CNN

As part of the *summative assessment* in this module, you should carry out a study on the model performance and reflect on your learning outcomes in the Element A of the written assignment. The current CNN model has a test accuracy of around 70%. How can you optimise the model performance based on this script? Please try different configurations of the CNN by choosing different the number of kernels in the first convolutional layer, the number of convolutional layers and pooling layers, the number of neurons in the hidden dense layer and the number of epochs in the table below. Then, train the CNN for testing. Please find out the best CNN configuration in the table by comparing the accuracies from ```model.evaluate()``` function.

| Kernels in the first layer | Convolution and pooling layers | Neurons in the hidden dense layer | Number of epoches |
| --- | --- | --- |---|
| 8 | 2 | 4 | 5 |
| 16 | 3 | 32 | 10 |
| 32 | 4 | 64 | 20 |
| 64 | 5 | 128 | 30 |
"""